#apiVersion: apps/v1
#kind: Deployment
#metadata:
#  name: flask-app
#  labels:
#    app: flask-app
#spec:
#  replicas: 1
#  selector:
#    matchLabels:
#      app: flask-app
#  template:
#    metadata:
#      labels:
#        app: flask-app
#    spec:
#      containers:
#      - name: flask-container
#        image: gcr.io/PROJECT_ID/flask-app:IMAGE_TAG
#        ports:
#        - containerPort: 5000
#        imagePullPolicy: Always
# flask-blue-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-blue
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask
      version: blue
  template:
    metadata:
      labels:
        app: flask
        version: blue
    spec:
      containers:
      - name: flask
        image: gcr.io/PROJECT_ID/flask-app:IMAGE_TAG
        ports:
        - containerPort: 5000
        imagePullPolicy: Always


---
# flask-green-deployment.yaml
apiVersion: apps/v1
kind: Deployment
metadata:
  name: flask-green
spec:
  replicas: 1
  selector:
    matchLabels:
      app: flask
      version: green
  template:
    metadata:
      labels:
        app: flask
        version: green
    spec:
      # 1) Use a custom K8s Service Account that is mapped to a Google Service Account
      #    with roles/secretmanager.secretAccessor so we can read GSM secrets.
      serviceAccountName: ksa-secrets-access

      containers:
      - name: flask
        image: gcr.io/PROJECT_ID/flask-app2:IMAGE_TAG
        ports:
          - containerPort: 5000
        imagePullPolicy: Always

        # 2) (Optional) We keep some env vars for non-secret info like DB_HOST, DB_NAME.
        #    DB_USER & DB_PASSWORD are no longer read from a K8s Secret but from GSM at runtime.
        env:
          - name: DB_HOST
            value: "34.165.202.146"
          - name: DB_NAME
            value: "mydb"

          # If your app code references GCP_PROJECT or any other variable, define it here:
          - name: GCP_PROJECT
            value: "YOUR_GCP_PROJECT_ID"

